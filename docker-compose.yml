version: '3.8'

services:
  # Nginx反向代理
  nginx:
    image: nginx:1.25
    container_name: doc-nginx
    env_file:
      - .env
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/logs:/var/log/nginx
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - doc-network
    environment:
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
    command: >
      /bin/sh -c "sed -i 's|DEEPSEEK_API_KEY_PLACEHOLDER|'\"$DEEPSEEK_API_KEY\"'|g' /etc/nginx/conf.d/default.conf
      && nginx -g 'daemon off;'"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Elasticsearch搜索引擎
  elasticsearch:
    image: elasticsearch:8.12.2
    container_name: doc-elasticsearch
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - xpack.security.enabled=false
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
      - bootstrap.memory_lock=true
    volumes:
      - ./docker/elasticsearch:/usr/share/elasticsearch/data
      - ./docker/config/elasticsearch/analysis-ik:/usr/share/elasticsearch/temp/analysis-ik
    user: root
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    command: >
      /bin/bash -c "
      mkdir -p /usr/share/elasticsearch/data &&
      chmod -R 777 /usr/share/elasticsearch/data &&
      rm -rf /usr/share/elasticsearch/plugins/analysis-ik &&
      cd /usr/share/elasticsearch/plugins &&
      unzip /usr/share/elasticsearch/temp/analysis-ik/elasticsearch-analysis-ik-8.12.2.zip -d analysis-ik/ &&
      cp -r /usr/share/elasticsearch/temp/analysis-ik/custom /usr/share/elasticsearch/plugins/analysis-ik/config/ &&
      cp /usr/share/elasticsearch/temp/analysis-ik/IKAnalyzer.cfg.xml /usr/share/elasticsearch/plugins/analysis-ik/config/ &&
      chmod -R 777 /usr/share/elasticsearch/plugins/analysis-ik &&
      su elasticsearch -c '/usr/local/bin/docker-entrypoint.sh'"
    ports:
      - ${ELASTICSEARCH_PORT}:9200
    networks:
      - doc-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://elasticsearch:9200/_cluster/health | grep -q 'status.*green\\|status.*yellow'"]
      interval: 30s
      timeout: 30s
      retries: 3

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: doc-mysql
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./docker/mysql/data:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - doc-network
    restart: always

  # Redis缓存
  redis:
    image: redis:7.2
    container_name: doc-redis
    env_file:
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - ./docker/redis/data:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - doc-network
    restart: always

  # MinIO对象存储
  minio:
    image: minio/minio
    container_name: doc-minio
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: us-east-1
      TZ: Asia/Shanghai
    volumes:
      - ./docker/minio/data:/data
      - ./docker/config/backend:/docker-entrypoint-initdb.d
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      - doc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    command: server /data --console-address ":9001"
    restart: always

  # MinIO初始化服务
  minio-init:
    image: minio/mc
    container_name: doc-minio-init
    env_file:
      - .env
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./docker/config/backend:/init
    entrypoint: ["/bin/sh", "/init/init_minio.sh"]
    networks:
      - doc-network

  # 后端服务
  backend:
    build: 
      context: ./docMS
      dockerfile: Dockerfile
    container_name: doc-backend
    env_file:
      - .env
    depends_on:
      elasticsearch:
        condition: service_healthy
      mysql:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      SPRING_ELASTICSEARCH_USERNAME: ${ELASTIC_USERNAME}
      SPRING_ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      FILE_UPLOAD_DIR: /app/filedata
    ports:
      - "${BACKEND_PORT}:9090"
    networks:
      - doc-network
    restart: always
    volumes:
      - ./docker/filedata:/app/filedata
    command: sh -c "chmod -R 777 /app/filedata && java ${JAVA_OPTS} -jar /app/app.jar"

  # 前端服务
  frontend:
    build:
      context: ./docApp
      dockerfile: Dockerfile
    container_name: doc-frontend
    env_file:
      - .env
    environment:
      VITE_API_URL: http://backend:9090
      VITE_ES_URL: http://elasticsearch:9200
      VITE_ES_USERNAME: ${ELASTIC_USERNAME}
      VITE_ES_PASSWORD: ${ELASTIC_PASSWORD}
    expose:
      - "80"
    networks:
      - doc-network
    restart: always

networks:
  doc-network:
    driver: bridge

# 数据卷配置
volumes:
  mysql_data:
  es_data:
  redis_data:
  minio_data: 